////////////////////////////////////////////////////////////////////
// REFACTORING/SYNCH
////////////////////////////////////////////////////////////////////
- try to merge the events from extraction vs. search
  maybe event=article vs. event=verb?
  >> distinguish "topic" (=whole article) from event?
  



////////////////////////////////////////////////////////////////////
// ENTITY DETECTION
////////////////////////////////////////////////////////////////////
- the Spotlight API has completely changed: must update all of this :(

- apply the resolvers and linkers to the whole corpus
  - what about the combination of resolving/linking, how does this work?
  - assess their quality, possibly make some corrections
  - check wikidatalinker, it possibly requires the same post-processing as spotlight in order to create missing entities
    (for unrecognized mentions)
- assess the network extraction classes

- Make it possible to use the reference annotations instead of estimated ones, before applying resolution or linking
  	>> just need a recognizer able to load the reference file

- Check if the already configured tools are able to return periods, in which case it should
  be stored in the mention (especially the specialized recognizers).

- Note: a resolver may add new mentions, e.g. to represent pronouns.
  (like a linker may add new entities)

- See if OpeNer can be adapted to perform linking (?) 
  And all the other tools, too (OpenCalais seems like a good candidate).

- The unification between entities over the whole corpus is performed out of the processors, as an additional thing.
  also, its entities are recorded in specific files, at the level of the corpus.
  whereas the new mentions (bc of their entities) are recorded in a different file 
  	in the concerned linker folders of each article (?)
  	>> why?

- When linking, set the surface forms returned by the linking tool as the official name of the entity
  (keep the previous one as a possible surface form. it should already be in the list, anyway)
  
- Check for (new) French models in already working recognizers
 
- Once the entities have correctly been identified, we may want to switch to a more DB-oriented representation,
  in which we retrieve a bunch of info describing each entity. This would make it easier to compare entities like
  places, when inferring event similarity.
   
- what about applying several resolution tools in sequence? e.g. anaphora detection + coreference resolution
  >> this could be done as a specific resolver, combining other existing (and complementary) processors
   
- Should we use an "unknown" entity type?
  some tools are able to detect an entity but not always its type. still, the information is valuable.
  such a type would allow taking advantage of this spatial aspect.
  >> why not just a null value?





////////////////////////////////////////////////////////////////////
// NETWORK EXTRACTION
////////////////////////////////////////////////////////////////////
 - network extraction
   	- generate the bipartite network persons/events
    	- semi-supervised tool to unify entity names:
        - propose names close in terms of string distance
        - and name containing another entity's name
      - check why co-participation nets are so dense
 
   
   


////////////////////////////////////////////////////////////////////
// LIBRARIES
////////////////////////////////////////////////////////////////////
 Check libraries (probably added by Sabrine ages ago?)
 - why commons-csv-1.0.jar ?
 - what is filterbuilder.jar ?
 - htmlexer.jar ?
 - sitecapturer ?
 - thumbelina ?


////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

- Detect candidate mentions
  - Detect SVO (subject-verb-object) triplets
  - All subjects/objects are candidates
  - Also retrieve metadata such as gender, number, entity type, to be used later
- Group mentions
  1) Solve anaphoras and/or coreferences to get grammatically sound clusters
  	 Some of them actually correspond to the same entity (but mentions not grammatically connected)
  2) Merge these synonymous clusters 
  	 - Identify variants of the same proper name
     - Solve acronyms (for organizations)
     - Take advantage of the mentions metadata

  