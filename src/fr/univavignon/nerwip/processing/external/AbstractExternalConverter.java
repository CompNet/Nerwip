package fr.univavignon.nerwip.processing.external;

/*
 * Nerwip - Named Entity Extraction in Wikipedia Pages
 * Copyright 2011-16 Vincent Labatut et al.
 * 
 * This file is part of Nerwip - Named Entity Extraction in Wikipedia Pages.
 * 
 * Nerwip - Named Entity Extraction in Wikipedia Pages is free software: you can 
 * redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * Nerwip - Named Entity Extraction in Wikipedia Pages is distributed in the hope 
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
 * License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Nerwip - Named Entity Extraction in Wikipedia Pages.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;

import fr.univavignon.nerwip.data.article.Article;
import fr.univavignon.nerwip.data.entity.mention.Mentions;
import fr.univavignon.nerwip.processing.AbstractConverter;
import fr.univavignon.nerwip.processing.ConverterException;
import fr.univavignon.nerwip.processing.ProcessorName;
import fr.univavignon.nerwip.tools.file.FileTools;

/**
 * This class represents a converter for an external recognizer,
 * i.e. a tool executed outside of Nerwip. It reads a file generated
 * by the recognizer and converts it to our internal format.
 * 
 * @author Vincent Labatut
 */
public abstract class AbstractExternalConverter extends AbstractConverter
{	
	/**
	 * Builds a new external converter.
	 * 
	 * @param processorName
	 * 		Name of the associated recognizer.
	 * @param nerFolder
	 * 		Name of the associated recognizer folder.
	 * @param rawFile
	 * 		Name of the raw file (i.e. external format).
	 */
	public AbstractExternalConverter(ProcessorName processorName, String nerFolder, String rawFile)
	{	super(processorName,nerFolder,rawFile);
	}
	
	/////////////////////////////////////////////////////////////////
	// PROCESS			/////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/**
	 * Convert the file (supposedly) externally generated by the recognizer,
	 * into the mention list used internally by Nerwip. The file to be
	 * converted is passed as a string. 
	 * 
	 * @param article
	 * 		The considered article.
	 * @param mentionsStr
	 * 		String representation of the detected mentions.
	 * @return
	 * 		List of mentions detected by the associated recognizer.
	 * 
	 * @throws ConverterException
	 * 		Problem while performing the conversion.
	 */
	public abstract Mentions convert(Article article, String mentionsStr) throws ConverterException;
	
	/////////////////////////////////////////////////////////////////
	// RAW				/////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/**
	 * Reads the file generated externally by the
	 * associated recognizer to store the detected mentions.
	 * 
	 * @param article 
	 * 		Concerned article.
	 * @return 
	 * 		String representation of the file content.
	 * 
	 * @throws FileNotFoundException 
	 * 		Problem while reading the file.
	 * @throws UnsupportedEncodingException
	 * 		Could not handle the encoding.
	 */
	protected String readRawResults(Article article) throws FileNotFoundException, UnsupportedEncodingException
	{	File file = getRawFile(article);
	
		String result = FileTools.readTextFile(file, "UTF-8");
		return result;
	}
}
