package tr.edu.gsu.nerwip.recognition.external.tagen;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import tr.edu.gsu.nerwip.data.article.Article;
import tr.edu.gsu.nerwip.data.article.ArticleLanguage;
import tr.edu.gsu.nerwip.data.entity.EntityType;
import tr.edu.gsu.nerwip.recognition.RecognizerException;
import tr.edu.gsu.nerwip.recognition.RecognizerName;
import tr.edu.gsu.nerwip.recognition.external.AbstractExternalRecognizer;
import tr.edu.gsu.nerwip.tools.file.FileNames;
//import tr.edu.gsu.nerwip.tools.file.FileNames;
import tr.edu.gsu.nerwip.tools.file.FileTools;

/**
 * This class acts as an interface with TagEN.
 * <br/>
 * Recommended parameter values:
 * <ul>
 * 	<li>{@code ignorePronouns}: {@code true}</li>
 * 	<li>{@code exclusionOn}: {@code false}</li>
 * </ul>
 * 
 * @author Sabrine Ayachi
 * @author Vincent Labatut
 */
public class TagEN extends AbstractExternalRecognizer<TagENConverter>
{	
	/**
	 * Builds and sets up an object representing the TagEN tool.
	 * 
	 * @param ignorePronouns
	 *      Whether or not pronouns should be excluded from the detection.
	 * @param exclusionOn
	 *      Whether or not stop words should be excluded from the detection.
	 */
	public TagEN(boolean ignorePronouns, boolean exclusionOn)
	{	super(false, ignorePronouns, exclusionOn);
	
		setIgnoreNumbers(false);
		
		//init converter
		converter = new TagENConverter(getFolder());
	}
	
	/////////////////////////////////////////////////////////////////
	// NAME 			/////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	@Override
	public RecognizerName getName()
	{	return RecognizerName.TAGEN;
	}

	/////////////////////////////////////////////////////////////////
	// FOLDER 			/////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	@Override
	public String getFolder()
	{	String result = getName().toString();
		
		result = result + "_" + "ignPro=" + ignorePronouns;
		result = result + "_" + "exclude=" + exclusionOn;
		
		return result;
	}

	/////////////////////////////////////////////////////////////////
	// ENTITY TYPES 	/////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/** List of entities recognized by TagEN */
	private static final List<EntityType> HANDLED_TYPES = Arrays.asList
	(
		EntityType.DATE, 
		EntityType.LOCATION, 
		EntityType.PERSON
	);

	@Override
	public List<EntityType> getHandledEntityTypes() 
	{	return HANDLED_TYPES;
	}

	/////////////////////////////////////////////////////////////////
	// LANGUAGES 		/////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/** List of languages this recognizer can treat */
	private static final List<ArticleLanguage> HANDLED_LANGUAGES = Arrays.asList
	(	
		ArticleLanguage.EN, 
		ArticleLanguage.FR
	);

	@Override
	public boolean canHandleLanguage(ArticleLanguage language)
	{	boolean result = HANDLED_LANGUAGES.contains(language);
		return result;
	}

	/////////////////////////////////////////////////////////////////
	// PROCESSING 			/////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/** Name of the temporary file generated for TagEn */
	private static final String INPUT_FILE = "input.txt";
	/** Name of the file generated by TagEn */
	private static final String OUTPUT_FILE = "output.txt";
	/** TagEn parameters the user does not need to change */
	private static final String STATIC_PARAMS = ""
			+ "--align"		// resets the text exactly like it originally was (cancelling whatever preprocessin/cleaning was performed) 
			+ "--yes";		// automatically answers yes to all question of the type "do you want to overwrite some file?"
	private static final Map<Integer,String> VERBOSITY_LEVEL = new HashMap<Integer,String>();
	{	VERBOSITY_LEVEL.put(0, "--silent");
		VERBOSITY_LEVEL.put(1, "--verbose");
		VERBOSITY_LEVEL.put(2, "--Verbose");
	}
	
	/**
	 * Returns the path of the temporary file
	 * created for TagEn (containing the article
	 * content).
	 * 
	 * @param article
	 * 		The concerned article.
	 * @return
	 * 		Path of the input file.
	 */
	private String getInputFile(Article article)
	{	String result = article.getFolderPath()
			+ File.separator
			+ getFolder() 
			+ File.separator 
			+ INPUT_FILE;
		return result; 
	}
	
	/**
	 * Returns the path of the result file
	 * created by TagEn (containing the detected
	 * entities).
	 * 
	 * @param article
	 * 		The concerned article.
	 * @return
	 * 		Path of the output file.
	 */
	private String getOutputFile(Article article)
	{	String result = article.getFolderPath()
			+ File.separator
			+ getFolder() 
			+ File.separator 
			+ OUTPUT_FILE;
		return result; 
	}
	
	@Override
	protected String detectEntities(Article article) throws RecognizerException
	{	logger.increaseOffset();
		String result = null;
		
		logger.log("DÃ©but du programme");
        try
        {	
        	// write article raw text in a file
        	String text = article.getRawText();
			String inputPath = getInputFile(article);
			File inputFile = new File(inputPath);
			logger.log("Copying the article content in input file "+inputFile);
			FileTools.writeTextFile(inputFile, text);
			
			// invoke the external tool and retrieve its output

			
        	String command = "/home/sabrine/TagEN/./tagen :mucfr /home/sabrine/TagEN/input.txt";
        	
        	//String command = "sudo " + FileNames.FO_TAGEN + File.separator + "." + File.separator + "tagen :mucfr " + file;
        	//String command = "chmod +x " + FileNames.FO_TAGEN;
            //String command = "alias tagen=res/ner/tagen/tagen";
        	
        	//String command = "chmod +x " + FileNames.FO_TAGEN + File.separator + " ." + File.separator + "tagen" +  " :mucfr "  + file;
        	
            Process p = Runtime.getRuntime().exec(command);
            
            BufferedReader output = getOutput(p);
            BufferedReader error = getError(p);
            String ligne = "";
            
         

            while ((ligne = output.readLine()) != null)
            {	logger.log(ligne);
            }
           
            while ((ligne = error.readLine()) != null)
            {	logger.log(ligne);
            }

            p.waitFor();
        }
        catch (IOException e)
        {	e.printStackTrace();
        }
        catch (InterruptedException e)
        {	e.printStackTrace();
        }
        logger.log("Fin du programme");
        
        // extract text from input.tag.txt
    
        String tagOutput = null;
        
     
        try {
        	InputStream ips = new FileInputStream("/home/sabrine/TagEN/input.tag.txt");
        	
 
        	 //originalText = IOUtils.toString(ips).trim();
        	
        	
        	InputStreamReader ipsr = new InputStreamReader(ips);
        	BufferedReader br = new BufferedReader(ipsr);
        	String ligne;
        	while ((ligne = br.readLine()) != null) {
        	logger.log(ligne);
        	result += ligne + "\n";
        	}
        	br.close();
        	} catch (Exception e) {
        		tagOutput =  e.toString();
        	
        	} 
        //logger.log(tagOutput);
		
		logger.decreaseOffset();
		return result;
    }
}
